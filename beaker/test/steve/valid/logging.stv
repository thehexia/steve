foreign def printf(fmt : char[], ...) -> int;
foreign def fprintf(fp : uint(8)&, fmt : char[], ...) -> int;
foreign def fopen(filename : char[], mode : char[]) -> uint(8)&;
foreign def fclose(uint(8)&) -> int;
foreign def puts(str : char[]) -> int;

layout eth
{
  dst : uint(48);
  src : uint(48);
  type : uint(16);
}


layout ipv4
{
  version_ihl : uint(8);
  dscp_ecn    : uint(8);
  len         : uint(16);
  id          : uint(16);
  fragment    : uint(16);
  ttl         : uint(8);
  protocol    : uint(8);
  checksum    : uint(16);
  src         : uint(32);
  dst         : uint(32);
  // Ignore options.
}


layout udp
{
  src      : uint(16);
  dst      : uint(16);
  len      : uint(16);
  checksum : uint(16);
}


layout tcp
{
  src : uint(16);
  dst : uint(16);
  ack : uint(32);
  seq : uint(32);
  control : uint(16); // TCP len: 0-3, Reserved: 4-9, Flags: 10-15
  window : uint(16);
  checksum : uint(16);
  urgent_ptr : uint(16);
  // Ignore options.
}


decoder start eth_d(eth)
{
  extract eth.type;
  match(eth.type) {
    case 0x800: decode ipv4_d;
    miss: drop;
  }
}


decoder ipv4_d(ipv4)
{
  extract ipv4.version_ihl;
  extract ipv4.protocol;
  extract ipv4.src;
  extract ipv4.dst;

  var hdr_len : uint(8) =  (ipv4.version_ihl & 0x0f) * 4;

  // Only care about udp and tcp requests,
  match (ipv4.protocol) {
    case 0x06: decode tcp_d advance hdr_len;
    case 0x11: decode udp_d advance hdr_len;
    miss: drop;
  }
}


decoder udp_d(udp)
{
  extract udp.dst;
  if (udp.dst != 80 && udp.dst != 443) {
    printf("%d\n", udp.dst);
    drop;
  }
}


decoder tcp_d(tcp)
{
  extract tcp.dst;
  if (tcp.dst != 80 && tcp.dst != 443)
    drop;
}
