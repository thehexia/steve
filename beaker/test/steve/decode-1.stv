Port p1;
Port p2;

layout eth
{
	src : int;
	dst : int;
	type : int;
}


layout ipv4
{
	src : int;
	dst : int;
	protocol: int;
}


decoder start eth_d(eth)
{
	extract eth::src;
	extract eth::dst;
	extract eth::type;

	match (eth::type) {
		case 800: decode ipv4_d;
		case 880: decode ipv4_d;
	}
}

decoder ipv4_d(ipv4)
{
	extract ipv4::dst;
	extract ipv4::protocol;

	match (ipv4::protocol) {
		case 0: goto t1;
	}
}


exact_table t1(eth::src, eth::dst)
{
  {0, 1} -> { };
	{1, 2} -> { };
}


// exact_table t2(ipv4::dst)
// {
  // {0} -> {
		// decode ipv4_d;
	// };
	// {1} -> {
		// decode eth_d;
	// };
//}
